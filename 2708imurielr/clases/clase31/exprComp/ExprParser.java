
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ExprParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ExprSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public ExprParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ExprParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExprParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\004\004\011\006\001\002\000\016\002" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\001\002" +
    "\000\004\002\022\001\002\000\006\004\004\011\006\001" +
    "\002\000\014\002\000\005\011\006\010\007\013\010\012" +
    "\001\002\000\006\004\004\011\006\001\002\000\006\004" +
    "\004\011\006\001\002\000\006\004\004\011\006\001\002" +
    "\000\006\004\004\011\006\001\002\000\016\002\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\001\002\000\016" +
    "\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\001" +
    "\002\000\016\002\uffff\005\uffff\006\uffff\007\013\010\012" +
    "\012\uffff\001\002\000\016\002\ufffe\005\ufffe\006\ufffe\007" +
    "\013\010\012\012\ufffe\001\002\000\014\005\011\006\010" +
    "\007\013\010\012\012\021\001\002\000\016\002\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\002\004\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\017\001\001\000\002" +
    "\001\001\000\004\003\016\001\001\000\004\003\015\001" +
    "\001\000\004\003\014\001\001\000\004\003\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExprParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExprParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExprParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ExprParser$actions {
  private final ExprParser parser;

  /** Constructor */
  CUP$ExprParser$actions(ExprParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ExprParser$do_action_part00000000(
    int                        CUP$ExprParser$act_num,
    java_cup.runtime.lr_parser CUP$ExprParser$parser,
    java.util.Stack            CUP$ExprParser$stack,
    int                        CUP$ExprParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExprParser$result;

      /* select the action based on the action number */
      switch (CUP$ExprParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		RESULT = start_val;
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExprParser$parser.done_parsing();
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr ADD expr 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = l + r; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr SUB expr 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = l - r; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr TIMES expr 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = l * r; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIV expr 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = l / r; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = (Integer) n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = e; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ExprParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ExprParser$do_action(
    int                        CUP$ExprParser$act_num,
    java_cup.runtime.lr_parser CUP$ExprParser$parser,
    java.util.Stack            CUP$ExprParser$stack,
    int                        CUP$ExprParser$top)
    throws java.lang.Exception
    {
              return CUP$ExprParser$do_action_part00000000(
                               CUP$ExprParser$act_num,
                               CUP$ExprParser$parser,
                               CUP$ExprParser$stack,
                               CUP$ExprParser$top);
    }
}

}
