
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package co.edu.eafit.dis.st0270.jaycompiler.parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JayCompilerParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JayCompilerSymbolsCup.class;
}

  /** Default constructor. */
  @Deprecated
  public JayCompilerParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JayCompilerParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JayCompilerParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\012\000\002\002" +
    "\011\000\002\002\011\000\002\002\010\000\002\003\004" +
    "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\005\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\011\011\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\011\000\002\012\007\000\002\013\005\000" +
    "\002\014\006\000\002\015\007\000\002\016\003\000\002" +
    "\016\005\000\002\017\003\000\002\017\005\000\002\020" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\021\003\000\002\021\005\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\023" +
    "\003\000\002\023\004\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\004\005\001\002\000\004\002\137\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\004\010\011\001\002\000" +
    "\022\010\025\011\022\012\017\013\026\015\014\017\023" +
    "\021\021\042\013\001\002\000\006\012\017\013\026\001" +
    "\002\000\004\016\133\001\002\000\016\010\ufff1\015\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\042\ufff1\001\002\000\014\010" +
    "\025\015\014\017\023\021\021\042\013\001\002\000\014" +
    "\010\ufff5\015\ufff5\017\ufff5\021\ufff5\042\ufff5\001\002\000" +
    "\004\042\ufffa\001\002\000\004\042\126\001\002\000\004" +
    "\006\121\001\002\000\004\002\ufffd\001\002\000\004\006" +
    "\042\001\002\000\016\010\ufff2\015\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\042\ufff2\001\002\000\014\010\025\015\014\017" +
    "\023\021\021\042\013\001\002\000\004\042\ufff9\001\002" +
    "\000\016\010\025\011\036\015\014\017\023\021\021\042" +
    "\013\001\002\000\016\010\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\042\ufff0\001\002\000\014\010\ufff4\015\ufff4\017" +
    "\ufff4\021\ufff4\042\ufff4\001\002\000\004\011\034\001\002" +
    "\000\016\010\uffef\015\uffef\017\uffef\020\uffef\021\uffef\042" +
    "\uffef\001\002\000\004\002\ufffe\001\002\000\004\011\037" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\011\041\001\002\000\016\010\uffec\015\uffec" +
    "\017\uffec\020\uffec\021\uffec\042\uffec\001\002\000\016\006" +
    "\056\036\055\037\047\040\052\041\045\042\043\001\002" +
    "\000\036\007\uffd6\015\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\001\002\000\026\007\uffe7\015\uffe7\022" +
    "\uffe7\023\uffe7\024\063\025\064\026\065\027\062\030\067" +
    "\031\066\001\002\000\036\007\uffd3\015\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000\036\007" +
    "\uffde\015\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\075\035" +
    "\074\001\002\000\036\007\uffd5\015\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\001\002\000\036\007\uffdb" +
    "\015\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\001\002\000\032\007\uffe5\015\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\071" +
    "\033\072\001\002\000\036\007\uffd4\015\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\001\002\000\006\007" +
    "\113\022\110\001\002\000\036\007\uffd8\015\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\001\002\000\014" +
    "\006\056\037\047\040\052\041\045\042\043\001\002\000" +
    "\016\006\056\036\055\037\047\040\052\041\045\042\043" +
    "\001\002\000\012\007\uffe9\015\uffe9\022\uffe9\023\060\001" +
    "\002\000\016\006\056\036\055\037\047\040\052\041\045" +
    "\042\043\001\002\000\026\007\uffe6\015\uffe6\022\uffe6\023" +
    "\uffe6\024\063\025\064\026\065\027\062\030\067\031\066" +
    "\001\002\000\016\006\056\036\055\037\047\040\052\041" +
    "\045\042\043\001\002\000\016\006\056\036\055\037\047" +
    "\040\052\041\045\042\043\001\002\000\016\006\056\036" +
    "\055\037\047\040\052\041\045\042\043\001\002\000\016" +
    "\006\056\036\055\037\047\040\052\041\045\042\043\001" +
    "\002\000\016\006\056\036\055\037\047\040\052\041\045" +
    "\042\043\001\002\000\016\006\056\036\055\037\047\040" +
    "\052\041\045\042\043\001\002\000\032\007\uffe0\015\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\071\033\072\001\002\000\016\006\056" +
    "\036\055\037\047\040\052\041\045\042\043\001\002\000" +
    "\016\006\056\036\055\037\047\040\052\041\045\042\043" +
    "\001\002\000\036\007\uffdc\015\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\075\035\074\001\002\000\016\006\056\036" +
    "\055\037\047\040\052\041\045\042\043\001\002\000\016" +
    "\006\056\036\055\037\047\040\052\041\045\042\043\001" +
    "\002\000\036\007\uffda\015\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\001\002\000\036\007\uffd9\015\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\001\002" +
    "\000\036\007\uffdd\015\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\075\035\074\001\002\000\032\007\uffdf\015\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\071\033\072\001\002\000\032\007\uffe2\015" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\071\033\072\001\002\000\032\007" +
    "\uffe3\015\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\071\033\072\001\002\000" +
    "\032\007\uffe4\015\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\071\033\072\001" +
    "\002\000\032\007\uffe1\015\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\071\033" +
    "\072\001\002\000\006\007\107\022\110\001\002\000\036" +
    "\007\uffd2\015\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\001\002\000\016\006\056\036\055\037\047\040" +
    "\052\041\045\042\043\001\002\000\012\007\uffe8\015\uffe8" +
    "\022\uffe8\023\060\001\002\000\036\007\uffd7\015\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\001\002\000" +
    "\014\010\025\015\014\017\023\021\021\042\013\001\002" +
    "\000\016\010\ufff5\015\ufff5\017\ufff5\020\116\021\ufff5\042" +
    "\ufff5\001\002\000\014\010\uffed\015\uffed\017\uffed\021\uffed" +
    "\042\uffed\001\002\000\014\010\025\015\014\017\023\021" +
    "\021\042\013\001\002\000\016\010\ufff3\015\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\042\ufff3\001\002\000\014\010\uffee\015" +
    "\uffee\017\uffee\021\uffee\042\uffee\001\002\000\016\006\056" +
    "\036\055\037\047\040\052\041\045\042\043\001\002\000" +
    "\006\007\123\022\110\001\002\000\014\010\025\015\014" +
    "\017\023\021\021\042\013\001\002\000\016\010\uffea\015" +
    "\uffea\017\uffea\020\uffea\021\uffea\042\uffea\001\002\000\004" +
    "\015\131\001\002\000\006\014\127\015\ufff8\001\002\000" +
    "\004\042\126\001\002\000\004\015\ufff7\001\002\000\006" +
    "\012\ufffb\013\ufffb\001\002\000\020\010\ufff6\011\ufff6\015" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\042\ufff6\001\002\000\016" +
    "\006\056\036\055\037\047\040\052\041\045\042\043\001" +
    "\002\000\006\015\135\022\110\001\002\000\016\010\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\021\uffeb\042\uffeb\001\002\000" +
    "\016\010\ufffc\011\ufffc\015\ufffc\017\ufffc\021\ufffc\042\ufffc" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\026\004\011\005\017\007\031\010" +
    "\014\011\015\012\030\013\023\014\027\015\032\001\001" +
    "\000\010\003\135\004\011\005\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\131\010\014\011\015" +
    "\012\030\013\023\014\027\015\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\037\010\014\011\015\012\030\013\023" +
    "\014\027\015\032\001\001\000\002\001\001\000\020\007" +
    "\034\010\014\011\015\012\030\013\023\014\027\015\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\052\017\056\020\043\021\050" +
    "\022\045\023\047\024\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\111" +
    "\001\001\000\020\016\105\017\056\020\043\021\050\022" +
    "\045\023\047\024\053\001\001\000\002\001\001\000\014" +
    "\020\060\021\050\022\045\023\047\024\053\001\001\000" +
    "\002\001\001\000\012\021\104\022\045\023\047\024\053" +
    "\001\001\000\012\021\103\022\045\023\047\024\053\001" +
    "\001\000\012\021\102\022\045\023\047\024\053\001\001" +
    "\000\012\021\101\022\045\023\047\024\053\001\001\000" +
    "\012\021\100\022\045\023\047\024\053\001\001\000\012" +
    "\021\067\022\045\023\047\024\053\001\001\000\002\001" +
    "\001\000\010\022\077\023\047\024\053\001\001\000\010" +
    "\022\072\023\047\024\053\001\001\000\002\001\001\000" +
    "\006\023\076\024\053\001\001\000\006\023\075\024\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\110\020\043\021\050\022\045" +
    "\023\047\024\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\114\010\014\011\113\012\030\013\023" +
    "\014\027\015\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\116\012\117\013\023\014\027\015\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\121\017\056\020\043\021\050\022\045\023\047\024\053" +
    "\001\001\000\002\001\001\000\020\007\123\010\014\011" +
    "\015\012\030\013\023\014\027\015\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\133\017\056\020\043\021\050\022" +
    "\045\023\047\024\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JayCompilerParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JayCompilerParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JayCompilerParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JayCompilerParserCup$actions {
  private final JayCompilerParserCup parser;

  /** Constructor */
  CUP$JayCompilerParserCup$actions(JayCompilerParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JayCompilerParserCup$do_action_part00000000(
    int                        CUP$JayCompilerParserCup$act_num,
    java_cup.runtime.lr_parser CUP$JayCompilerParserCup$parser,
    java.util.Stack            CUP$JayCompilerParserCup$stack,
    int                        CUP$JayCompilerParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JayCompilerParserCup$result;

      /* select the action based on the action number */
      switch (CUP$JayCompilerParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-1)).value;
		RESULT = start_val;
              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JayCompilerParserCup$parser.done_parsing();
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= VOID MAIN LPAREN RPAREN LCURLY declarations statements RCURLY 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= VOID MAIN LPAREN RPAREN LCURLY declarations RCURLY 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= VOID MAIN LPAREN RPAREN LCURLY statements RCURLY 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= VOID MAIN LPAREN RPAREN LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declaration declarations 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= type identifiers SEMICOLON 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifiers ::= IDENT 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("identifiers",4, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identifiers ::= IDENT COMMA identifiers 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("identifiers",4, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= statemente 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= statementt 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statemente ::= IF LPAREN expression RPAREN statemente ELSE statemente 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statemente",7, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statemente ::= block 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statemente",7, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statemente ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statemente",7, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statemente ::= assignment 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statemente",7, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statemente ::= whilestatement 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statemente",7, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statementt ::= IF LPAREN expression RPAREN statemente ELSE statementt 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statementt",8, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statementt ::= IF LPAREN expression RPAREN statements 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("statementt",8, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // block ::= LCURLY statements RCURLY 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= IDENT ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // whilestatement ::= WHILE LPAREN expression RPAREN statements 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("whilestatement",11, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= conjuction 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression OR conjuction 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conjuction ::= relation 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("conjuction",13, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // conjuction ::= conjuction AND relation 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("conjuction",13, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relation ::= addition 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("relation",14, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relation ::= relation LT addition 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("relation",14, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relation ::= relation LET addition 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("relation",14, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relation ::= relation GT addition 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("relation",14, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relation ::= relation GET addition 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("relation",14, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relation ::= relation EQUALS addition 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("relation",14, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relation ::= relation DIFF addition 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("relation",14, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // addition ::= term 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("addition",15, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // addition ::= addition PLUS term 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("addition",15, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // addition ::= addition MINUS term 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("addition",15, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= negation 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= term TIMES negation 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= term DIVIDE negation 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // negation ::= factor 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("negation",17, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // negation ::= NOT factor 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("negation",17, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= IDENT 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$JayCompilerParserCup$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.elementAt(CUP$JayCompilerParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$JayCompilerParserCup$stack.peek()), RESULT);
            }
          return CUP$JayCompilerParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JayCompilerParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JayCompilerParserCup$do_action(
    int                        CUP$JayCompilerParserCup$act_num,
    java_cup.runtime.lr_parser CUP$JayCompilerParserCup$parser,
    java.util.Stack            CUP$JayCompilerParserCup$stack,
    int                        CUP$JayCompilerParserCup$top)
    throws java.lang.Exception
    {
              return CUP$JayCompilerParserCup$do_action_part00000000(
                               CUP$JayCompilerParserCup$act_num,
                               CUP$JayCompilerParserCup$parser,
                               CUP$JayCompilerParserCup$stack,
                               CUP$JayCompilerParserCup$top);
    }
}

}
